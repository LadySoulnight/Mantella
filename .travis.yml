sudo: required
dist: trusty

language: cpp

branches:
  except:
    - gh-pages

os:
  - linux

compiler:
  - clang
  - gcc

env:
  global:
    # Encrypted COVERITY_SCAN_TOKEN
    - secure: "M4RswpLBKVbIfY2k6W9mNFoSvJRpWFtMd5ynuMwgaBoaDbwn449KVfWKIlFruHGDfa9E/rB+y2twY5KktJm+RcLP8jvJCrWITy3E30rZQHAIgI1oAdy6i7NdMXHJYFQZs/eSYKZsN3/dfmzvnghA2txCG35tSxyLyb0vJp95VzY="

before_install:
  - sudo apt-get update -qq
  
install:
  # Prerequirements (including optional features)
  ## CMake
  - sudo apt-get install -qq cmake;
  
  ## Armadillo C++
  - sudo apt-get install -qq libblas-dev
  - sudo apt-get install -qq liblapack-dev
  - sudo apt-get install -qq libopenblas-dev
  - wget -O armadillo.tar.gz http://downloads.sourceforge.net/project/arma/armadillo-5.100.2.tar.gz
  - mkdir armadillo
  - tar -xzf armadillo.tar.gz -C ./armadillo --strip-components=1
  - cd armadillo
  - cmake .
  - make --quiet -j 4
  - sudo make --quiet install
  - cd ..
  - rm -Rf armadillo armadillo.tar.gz
  
  ## MPI (This will actually install 3.x on Ubuntu 14.04+ and 2.x on previous versions)
  - sudo apt-get install -qq libmpich2-dev

  
  # Testing
  - sudo apt-get install -qq catch
  - sudo apt-get install -qq clang-format-3.5
  ## Adds clang-format as an alternative to clang-format-3.5
  - sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-3.5 100
  - sudo apt-get install -qq iwyu
  - sudo apt-get install -qq valgrind
  - sudo apt-get install -qq lcov
  ## Using coveralls to store and visualise the code coverage
  - gem install coveralls-lcov
  
addons:
  coverity_scan:
    project:
      name: "SebastianNiemann/Mantella"
    notification_email: niemann@sra.uni-hannover.de
    build_command_prepend: "cov-configure --compiler gcc-4.8 --template; cmake -DBUILD_TESTS=On"
    build_command: "make -j 4"
    branch_pattern: coverity_scan

script:
  # Test matrix
  ## GCC
  ## - Unit tests with OpenMP support
  ## - Code coverage
  ## - Memory leaks
  ## - Installation
  - if [ "$CXX" == "g++" ]; then cmake -DBUILD_TESTS=On -DMEASURE_CODE_COVERAGE=On .; fi
  - if [ "$CXX" == "g++" ]; then make -j 4; fi
  - if [ "$CXX" == "g++" ]; then ./bin/mantellaTest ./test; fi
  - if [ "$CXX" == "g++" ]; then valgrind --leak-check=full --error-exitcode=1 ./bin/mantellaTest ./test; fi
  - if [ "$CXX" == "g++" ]; then sudo make install; fi
  
  # Clang
  ## - Unit tests with MPI support
  ## - Code format
  ## - Include rules
  - if [ "$CXX" == "clang++" ]; then cmake -DBUILD_TESTS=On -DSUPPORT_MPI=On .; fi
  - if [ "$CXX" == "clang++" ]; then make -j 4; fi
  - if [ "$CXX" == "clang++" ]; then mpiexec -n 4 ./bin/mantellaTest ./test; fi
  - if [ "$CXX" == "clang++" ]; then ./.travis-check.sh format; fi
  
after_success:
  - if [ "$CXX" == "g++" ]; then cd ./CMakeFiles/mantella.dir/src/; fi
  - if [ "$CXX" == "g++" ]; then lcov --directory . --capture --output-file coverage.info; fi
  - if [ "$CXX" == "g++" ]; then lcov --remove coverage.info '/usr/*' --output-file coverage.info; fi
  - if [ "$CXX" == "g++" ]; then lcov --remove coverage.info '*.hpp' --output-file coverage.info; fi
  - if [ "$CXX" == "g++" ]; then lcov --list coverage.info; fi
  - if [ "$CXX" == "g++" ]; then coveralls-lcov coverage.info; fi
