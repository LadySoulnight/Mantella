- title: Configuration
  groups:
    - functions:
      - extern bool isCachingSamples
      - extern bool isRecordingSampling
      - extern bool isVerbose
    
    
- title: Optimisation algorithms
  groups: 
    - title: Constructors
      functions:
        - OptimisationAlgorithm()
    - title: Optimiser
      functions:
        - void .optimise(OptimisationProblem optimisationProblem, arma::Mat<double> initialParameters)
    - title: Behaviour
      functions:
        - void .setNextParametersFunction(std::function nextParameterFunction, std::string nextParametersFunctionName)
        - void .setNextParametersFunction(std::function nextParameterFunction)
        - std::string .getNextParametersFunctionName()
        - void .setBoundariesHandlingFunction(std::function boundariesHandlingFunction, std::string boundariesHandlingFunctionName)
        - void .setBoundariesHandlingFunction(std::function boundariesHandlingFunction)
        - std::string .getBoundariesHandlingFunctionName()
        - void .setIsStagnatingFunction(std::function stagnationDetectionFunction, std::string stagnationDetectionFunctionName)
        - void .setIsStagnatingFunction(std::function stagnationDetectionFunction)
        - std::string .getIsStagnatingFunctionName()
        - void .setRestartingFunction(std::function restartingFunction, std::string restartingFunctionName)
        - void .setRestartingFunction(std::function restartingFunction)
        - std::string .getRestartingFunctionName()
    - title: Termination criteria
      functions:
        - void .setAcceptableObjectiveValue(double acceptableObjectiveValue)
        - double .getAcceptableObjectiveValue()
        - void .setMaximalNumberOfIterations(arma::uword maximalNumberOfIterations)
        - arma::uword .getMaximalNumberOfIterations()
        - void .setMaximalDuration(std::chrono::microseconds maximalDuration)
        - std::chrono::microseconds .getMaximalDuration()
    - title: Results
      functions:
        - bool .isFinished()
        - bool .isTerminated()
        - arma::uword .getNumberOfIterations()
        - std::chrono::microseconds .getDuration()
        - double .getBestObjectiveValue()
        - arma::Col<double> .getBestParameter()
    - title: Miscellaneous
      functions:
        - std::vector .getRecordedSampling()
        - void .reset()
        
        
  childs:
    - title: Random search
      groups: 
        - title: Constructors
          functions:
            - RandomSearch()
        - title: Optimiser
          functions:
            - void .optimise(OptimisationProblem optimisationProblem)
            
            
    - title: Hill climbing
      groups: 
        - title: Constructors
          functions:
            - HillClimbing()
        - title: Optimiser
          functions:
            - void .optimise(OptimisationProblem optimisationProblem)
        - title: Parameterisation
          functions:
            - void .setMinimalStepSize(double minimalStepSize)
            - double .getMinimalStepSize()
            - void .setMaximalStepSize(double minimalStepSize)
            - double .getMaximalStepSize()
            
            
    - title: Simulated annealing
      groups: 
        - title: Constructors
          functions:
            - SimulatedAnnealing()
        - title: Optimiser
          functions:
            - void .optimise(OptimisationProblem optimisationProblem)
        - title: Behaviour
          functions:
            - void .setIsAcceptableStateFunction(std::function isAcceptableStateFunction, std::string isAcceptableStateFunctionName)
            - void .setIsAcceptableStateFunction(std::function isAcceptableStateFunction)
            - std::string .getIsAcceptableStateFunctionName()
        - title: Parameterisation
          functions:
            - void .setMinimalStepSize(double minimalStepSize)
            - double .getMinimalStepSize()
            - void .setMaximalStepSize(double minimalStepSize)
            - double .getMaximalStepSize()
            
            
    - title: Hooke-Jeeves algorithm
      groups: 
        - title: Constructors
          functions:
            - HookeJeevesAlgorithm()
        - title: Optimiser
          functions:
            - optimise(OptimisationProblem optimisationProblem)
        - title: Parameterisation
          functions:
            - setInitialStepSize(double initialStepSize)
            - double getInitialStepSize()
            - setStepSizeDecrease(double stepSizeDecrease)
            - double getStepSizeDecrease()
            
            
    - title: Particle swarm optimisation
      groups: 
        - title: Constructors
          functions:
            - ParticleSwarmOptimisation()
        - title: Optimiser
          functions:
            - void .optimise(OptimisationProblem optimisationProblem, arma::uword numberOfParticles)
            - void .optimise(OptimisationProblem optimisationProblem)
        - title: Behaviour
          functions:
            - void .setNeighbourhoodTopologyFunction(std::function neighbourhoodTopologyFunction, std::string neighbourhoodTopologyFunctionName)
            - void .setNeighbourhoodTopologyFunction(std::function neighbourhoodTopologyFunction)
            - std::string .getNeighbourhoodTopologyFunctionName()
        - title: Parameterisation
          functions:
            - void .setMaximalAcceleration(double maximalAcceleration)
            - double .getMaximalAcceleration()
            - void .setMaximalLocalAttraction(double maximalLocalAttraction)
            - double .getMaximalLocalAttraction()
            - void .setMaximalGlobalAttraction(double maximalGlobalAttraction)
            - double .getMaximalGlobalAttraction()
            
            
- title: Optimisation problems
  groups: 
    - title: Constructors
      functions:
        - OptimisationProblem(arma::uword numberOfDimensions)
    - title: Constants
      functions:
        - const arma::uword .numberOfDimensions_
    - title: Objective
      functions:
        - void .setObjectiveFunction(std::function objectiveFunction, std::string objectiveFunctionName)
        - void .setObjectiveFunction(std::function objectiveFunction)
        - std::string .getObjectiveFunctionName()
        - double .getObjectiveValue(arma::Col<double> parameter)
        - double .getNormalisedObjectiveValue(arma::Col<double> normalisedParameter)
    - title: Constraints
      functions:
        - void .setLowerBounds(arma::Col<double> lowerBounds)
        - arma::Col<double> .getLowerBounds()
        - void .setUpperBounds(arma::Col<double> upperBounds)
        - arma::Col<double> .getUpperBounds()
    - title: Parameter space modifiers
      functions:
        - void .setParameterPermutation(arma::Col<arma::uword> parameterPermutation)
        - arma::Col<arma::uword> .getParameterPermutation()
        - void .setParameterScaling(arma::Col<double> parameterScaling)
        - arma::Col<double> .getParameterScaling()
        - void .setParameterTranslation(arma::Col<double> parameterTranslation)
        - arma::Col<double> .getParameterTranslation()
        - void .setParameterRotation(arma::Mat<double> parameterRotation)
        - arma::Mat<double> .getParameterRotation()
        - void .setMinimalParameterDistance(arma::Col<double> minimalParameterDistance)
        - arma::Col<double> .getMinimalParameterDistance()
    - title: Objective value space modifiers
      functions:
        - void .setObjectiveValueScaling(double objectiveValueScaling)
        - double .getObjectiveValueScaling()
        - void .setObjectiveValueTranslation(double objectiveValueTranslation)
        - double .getObjectiveValueTranslation()
        - std::unordered_map .getCachedSamples()
    - title: Counter
      functions:
        - arma::uword .getNumberOfEvaluations()
        - arma::uword .getNumberOfDistinctEvaluations()
    - title: Miscellaneous
      functions:
        - void .reset()

        
  childs:
    - title: Black-box optimisation benchmark
      groups: 
        - title: Constructors
          functions:
            - bbob::AttractiveSectorFunction(arma::uword numberOfDimensions)
            - bbob::BentCigarFunction(arma::uword numberOfDimensions)
            - bbob::BuecheRastriginFunction(arma::uword numberOfDimensions)
            - bbob::CompositeGriewankRosenbrockFunctionF8F2(arma::uword numberOfDimensions)
            - bbob::DifferentPowersFunction(arma::uword numberOfDimensions)
            - bbob::DiscusFunction(arma::uword numberOfDimensions)
            - bbob::EllipsoidalFunction(arma::uword numberOfDimensions)
            - bbob::EllipsoidalFunctionRotated(arma::uword numberOfDimensions)
            - bbob::GallaghersGaussian101mePeaksFunction(arma::uword numberOfDimensions)
            - bbob::GallaghersGaussian21hiPeaksFunction(arma::uword numberOfDimensions)
            - bbob::KatsuuraFunction(arma::uword numberOfDimensions)
            - bbob::LinearSlope(arma::uword numberOfDimensions)
            - bbob::LunacekBiRastriginFunction(arma::uword numberOfDimensions)
            - bbob::RastriginFunction(arma::uword numberOfDimensions)
            - bbob::RastriginFunctionRotated(arma::uword numberOfDimensions)
            - bbob::RosenbrockFunction(arma::uword numberOfDimensions)
            - bbob::RosenbrockFunctionRotated(arma::uword numberOfDimensions)
            - bbob::SchaffersF7Function(arma::uword numberOfDimensions)
            - bbob::SchaffersF7FunctionIllConditioned(arma::uword numberOfDimensions)
            - bbob::SchwefelFunction(arma::uword numberOfDimensions)
            - bbob::SharpRidgeFunction(arma::uword numberOfDimensions)
            - bbob::SphereFunction(arma::uword numberOfDimensions)
            - bbob::StepEllipsoidalFunction(arma::uword numberOfDimensions)
            - bbob::WeierstrassFunction(arma::uword numberOfDimensions)
        - title: Objective
          functions:
            - double .getOptimalObjectiveValue() 
            
            
    - title: Kinematically redundant machines
      groups: 
        - title: Constructors
          functions:
            - krm::ParallelKinematicMachine3PRPR()
            - krm::ParallelKinematicMachine3PRRR()
            - krm::ParallelKinematicMachine6PRUS()
            - krm::ParallelKinematicMachine6PUPS()
        - title: Constants
          functions:
            - const arma::uword .numberOfWorkspaceDimensions_
        - title: End-effector trajectory
          functions:
            - void .setEndEffectorTrajectory(arma::Mat<double> endEffectorTrajectory)
            - arma::Mat<double> getEndEffectorTrajectory()
            
            
- title: Problem analyses
  childs:
    - title: Samples selection
      functions:
        - std::unordered_map elitists(std::unordered_map samples, arma::uword numberOfSamplesToSelect)
        
        
    - title: Samples analysis
      groups: 
        - title: Passive
          functions:
            - double fitnessDistanceCorrelation(std::unordered_map samples)
            - double lipschitzContinuity(std::unordered_map samples)
        - title: Active
          functions:
            - std::vector additiveSeparability(OptimisationProblem optimisationProblem, arma::uword numberOfEvaluations, double maximalDeviation, double minimalConfidence)
            
            
- title: Helpers
  childs:
    - title: Random number generator
      functions:
        - std::mt19937_64 Rng::getGenerator()
        - void Rng::setSeed(arma::arma_rng::seed_type seed)
        - void Rng::setRandomSeed()
        - arma::arma_rng::seed_type Rng::getSeed()
        
        
    - title: Mathematical functions
      groups: 
        - title: Algebra
          functions:
            - arma::uword polynomialSize(arma::uword numberOfElements, arma::uword polynomialOrder)
            - arma::Col<double> polynomial(arma::Col<double> parameter, arma::uword polynomialOrder)
        - title: Combinatorics
          functions:
            - arma::uword factorial(arma::uword n)
            - arma::uword nchoosek(arma::uword n, arma::uword k)
            - std::vector combinations(arma::uword numberOfElements, arma::uword combinationSize)
            - std::vector multicombinations(arma::uword numberOfElements, arma::uword combinationsize)
        - title: Geometry
          functions:
            - arma::Mat<double>::fixed<2, 2> rotationMatrix2D(double angle)
            - arma::Mat<double>::fixed<3, 3> rotationMatrix3D(double rollAngle, double pitchAngle, double yawAngle)
            - std::vector circleCircleIntersections(arma::Col<double>::fixed<2> firstCenter, double firstRadius, arma::Col<double>::fixed<2> secondCenter, double secondRadius)
            - std::vector circleSphereIntersections(arma::Col<double>::fixed<3> circleCenter, double circleRadius, arma::Col<double>::fixed<3> circleNormal, arma::Col<double>::fixed<3> sphereCenter, double sphereRadius)
        - title: Number theory
          functions:
            - arma::Mat<double> hammersleySet(arma::Col<arma::uword> base, arma::Col<arma::uword> seed, arma::uword numberOfElements)
            - arma::Mat<double> haltonSequence(arma::Col<arma::uword> base, arma::Col<arma::uword> seed, arma::uword numberOfElements)
            - arma::Col<double> vanDerCorputSequence(arma::uword base, arma::uword seed, arma::uword numberOfElements)
            - std::vector twoSetsPartitions(arma::uword numberOfElements)
        - title: Probability
          functions:
            - arma::Mat<double> randomRotationMatrix(arma::uword numberOfDimensions)
            - arma::Col<arma::uword> randomPermutationVector(arma::uword numberOfElements, arma::uword cycleSize)
            - arma::Col<arma::uword> randomPermutationVector(arma::uword numberOfElements)
            - arma::Col<double> randomNeighbour(arma::Col<double> parameter, double minimalDistance, double maximalDistance)
            
            
    - title: Armadillo and C++ STL
      functions:
        - arma::Col<arma::uword> range(arma::uword start, arma::uword end, arma::uword stepSize)
        - arma::Col<arma::uword> range(arma::uword start, arma::uword end)
        - arma::uword Hash.operator(arma::Col<double> key)
        - bool IsEqual.operator(arma::Col<double> firstKey, arma::Col<double> secondKey)
        
        
    - title: Message passing interface
      functions: 
        - void mpiBestSample(void* firstInput, void* secondInput, int* size, MPI_Datatype* type)